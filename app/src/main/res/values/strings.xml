<resources>
    <string name="app_name">Kaushal Xchange</string>
    <string name="skills_i_can_teach">Skills I Can Teach</string>
    <string name="my_learning_wishlist">My Learning Wishlist</string>
    <string name="my_skill_swaps">My Connections</string>
    <string name="add_a_skill">Add a Skill</string>
    <string name="explore_skills">Explore Skills</string>
    <string name="find_a_match">Find a Match</string>
    <string name="add_skill_button_description">Add a new skill</string>
    <string name="explore_button_description">Explore skills</string>
    <string name="match_button_description">Find a skill match</string>
    <string name="swap_button_description">View my skill swaps</string>
    <string name="teach_button_description">Skills I can teach</string>
    <string name="wishlist_button_description">My learning wishlist</string>
    <string name="recycler_description">List of available skills</string>
    <string name="python">Python</string>
    <string name="rv_description">Skill list</string>
    <string name="name">Name</string>
    <string name="kaushal_xchange">Kaushal Xchange</string>
    <string name="my_skills">My Skills</string>
    <string name="navigation_drawer_open">Open navigation drawer</string>
    <string name="navigation_drawer_close">Close navigation drawer</string>


    <string name="module1_notes">Python Basics:Python is a high-level, interpreted language known for its simplicity and readability. It uses indentation instead of braces to define code blocks, which enforces clean and consistent structure. Variables in Python are dynamically typed, meaning you don’t declare their type explicitly; the interpreter assigns it at runtime. For example, x = 5 creates an integer variable without needing a type keyword. To show output, Python provides the print() function. Core built-in types include int for whole numbers, float for decimals, str for text, and bool for logical values. Python also offers powerful data structures like lists (ordered, mutable collections) and dictionaries (unordered mappings of key-value pairs). These features, along with Python’s easy syntax, make it ideal for both beginners and advanced programmers working on diverse applications.</string>
    <string name="module1_notes_java">Java Basics:Java is a high-level, object-oriented, and platform-independent programming language widely used for application development. It follows the principle of write once, run anywhere through the Java Virtual Machine, which allows programs to run on any system. Every Java program begins with a class, and the main method is the entry point of execution. Java is strongly typed, meaning each variable must have a declared data type such as int, float, char, boolean, or String. It supports operators, control flow statements like if, else, switch, loops, and exception handling for error management. Java provides automatic memory management through garbage collection. It has a large standard library for building applications. Java is commonly used for desktop, mobile, enterprise, and web applications, making it one of the most popular programming languages.  </string>
    <string name="module1_notes_c">C Basics:C is a general-purpose, structured, and procedural programming language developed by Dennis Ritchie in 1972 at Bell Labs. It is widely used for system programming, operating systems, and embedded systems due to its efficiency and portability. A C program consists of functions, variables, statements, and expressions. The basic building blocks include data types (int, float, char, etc.), operators (arithmetic, relational, logical), and control structures (if, else, loops). Every C program begins execution from the main() function. C supports both low-level features like pointers and high-level concepts like modular programming. Programs in C must be compiled and linked before execution. C uses header files such as stdio.h and conio.h for standard functions. Its simplicity, speed, and closeness to hardware make it an essential foundation for learning advanced languages.</string>
    <string name="module1_notes_html">Introduction to HTML:HTML also called HyperText Markup Language is the standard language used to create web pages. It provides a way to structure content using tags that define different parts of a webpage. An HTML file usually starts with a doctype declaration followed by the html element which includes the head and body sections. The head contains metadata like title and links to styles or scripts while the body displays content such as text and images. Headings paragraphs images and links are the main building blocks of a page. Attributes are used to add more details to elements such as specifying the source of an image. HTML is not case sensitive but is commonly written in lowercase. HTML5 introduced semantic elements and multimedia support making webpages more powerful and accessible.</string>
    <string name="module1_notes_css">CSS Basics and Selectors:CSS stands for Cascading Style Sheets and it is used to style HTML pages. Styles can be applied in three ways inline internal and external. Inline CSS is written inside an element tag internal CSS is written inside a style tag within the head section and external CSS is linked through a separate file. CSS selectors are used to target elements for styling. The element selector selects tags directly like paragraph or heading. The class selector allows targeting multiple elements with the same class name. The id selector styles unique elements with an id. Combinator selectors like descendant child and sibling help in applying styles to elements based on their relation in the document structure. CSS basics provide the foundation for building consistent web design.</string>
    <string name="module1_notes_js">Basics of JavaScript:JavaScript is a programming language used to make web pages interactive. It supports variables declared with var let and const. Data types include number string boolean null undefined symbol and bigint. Operators allow mathematical and logical operations. Type conversion can happen explicitly using functions like Number and String or implicitly through type coercion. Console log is often used for debugging while alert and prompt provide user interaction. JavaScript is case sensitive and follows a syntax similar to other languages like C and Java. Understanding basics such as variables data types and operators forms the foundation of all further concepts. A strong grasp here ensures smooth learning of advanced features and is the first step to becoming confident with JavaScript development.</string>


    <string name="module2_notes">Data Types:Data types in Python define the kind of values a variable can store and how they can be used. Python is dynamically typed, so the type is determined when the value is assigned. The core numeric types are int (integers), float (decimal numbers), and complex (numbers with real and imaginary parts). For text, Python uses str (string), which is immutable. Boolean values are represented using bool (True or False). For collections, Python provides several built-in types: list (ordered, mutable sequence), tuple (ordered, immutable sequence), set (unordered, unique elements), and dict (unordered collection of key-value pairs). Each type comes with useful methods for manipulation. Understanding these types is fundamental since they form the basis of all Python programs and allow efficient storage, access, and processing of data. </string>
    <string name="module2_notes_java">Object and Class:In Java, classes and objects are the core of object-oriented programming. A class is a blueprint or template that defines the properties and behaviors of objects. It contains variables, known as fields, and methods, which define actions. For example, a class Car may have fields like color and speed and methods like start or stop. An object is an instance of a class created using the new keyword. Each object has its own copy of the fields but shares the methods defined in the class. Multiple objects can be created from a single class, each representing a unique entity. This approach allows modular, reusable, and organized code. The concept of classes and objects enables abstraction and real-world modeling, making Java programs structured and scalable.</string>
    <string name="module2_notes_c">Variable and Data types:In C, variables are named memory locations used to store data values during program execution. A variable must be declared before use with a specific data type that defines the kind of value it can hold. Data types in C are mainly classified into: basic, derived, enumeration, and user-defined. Basic types include int (integers), float (decimal numbers), double (double-precision numbers), and char (characters). The void type represents no value. Modifiers such as short, long, signed, and unsigned further refine data ranges. Derived types include arrays, pointers, and structures. Constants can also be declared using const or #define. Data type selection is important for memory optimization and performance. Variables must follow naming rules: begin with a letter/underscore, no spaces, and case sensitivity applies.</string>
    <string name="module2_notes_html">Text Formatting and Lists:HTML provides features to format text and organize content clearly. Headings are written using h1 to h6 tags while paragraphs are created with p. A line break is added with br and horizontal rule with hr. Text can be highlighted with bold italic underline or marked emphasis. Quotes are shown with blockquote and code snippets with code tag. Lists are useful for organizing items. An ordered list shows numbered items an unordered list uses bullet points and a description list explains terms with their definitions. Lists can also be nested to combine different types. Semantic emphasis like strong or em is important for screen readers and accessibility. Proper formatting improves the readability and presentation of a webpage making it easier for users to understand and navigate information.</string>
    <string name="module2_notes_css">Box Model and Layouts:The CSS box model defines how elements are structured and spaced in a web page. Each element is considered as a box consisting of content padding border and margin. Content is the actual data text or image inside the element. Padding adds space between content and border. Border wraps the padding and content while margin adds space outside the border separating elements. Understanding the box model is crucial for accurate page layouts. Layouts in CSS are managed with display properties like block inline inline block and flex. Positioning methods include static relative absolute and fixed. Modern layout systems such as Flexbox and Grid make alignment and spacing easier for responsive design. These features allow developers to create structured user friendly interfaces with precise control.</string>
    <string name="module2_notes_js">Control Flow and Functions:Control flow defines how JavaScript code executes step by step. Conditional statements like if else and switch allow decision making based on conditions. Loops like for while and do while are used to repeat actions until a condition is met. Functions are reusable blocks of code that perform specific tasks. They can be declared in many ways including arrow functions and function expressions. Functions may take parameters with default values and return results. Scope is important to understand whether a variable is accessible in local global or block contexts. Closures allow a function to remember its environment. Higher order functions accept other functions as parameters. Mastery of control flow and functions builds logical thinking and enables developers to create organized efficient and reusable code.</string>


    <string name="module3_notes">Control Flow Statements:Control flow statements in Python determine the order in which code is executed, allowing decisions, repetition, and branching. The if, elif, and else statements are used for decision-making. They execute blocks of code based on conditions that evaluate to True or False. For repeating tasks, Python provides loops: the for loop is typically used to iterate over sequences like lists, strings, or ranges, while the while loop executes as long as a condition remains true. To control loop behavior, Python offers break (to exit a loop early), continue (to skip the current iteration and move to the next), and pass (a placeholder that does nothing). Together, these statements give programmers flexibility to direct program execution logically and efficiently in different problem-solving scenarios.</string>
    <string name="module3_notes_java">Data Types:Data types in Java define the kind of values a variable can hold and how much memory it will use. They are divided into two categories: primitive and non-primitive. Primitive data types are the basic building blocks and include byte, short, int, long for integers, float and double for decimal values, char for a single character, and boolean for true or false. Each primitive type has a fixed size, making Java strongly typed and memory efficient. Non-primitive types, also called reference types, include String, arrays, classes, and objects. These are more flexible and can store complex data structures. Java automatically converts smaller types into larger ones during operations, known as type casting. Understanding data types ensures proper memory usage and prevents type-related errors in Java programs.</string>
    <string name="module3_notes_c">Control Flow Statements:In C, control flow statements determine the order in which instructions are executed, enabling decision-making and repetition. They are mainly divided into decision-making and looping constructs. Decision-making includes if, if-else, else-if ladder, and switch-case statements, which allow selective execution of code blocks based on conditions. Looping statements (for, while, do-while) are used for repeating tasks until a condition is met. The for loop is best when the number of iterations is known, while while and do-while handle situations where the condition is checked during or after execution. Additionally, jump statements like break, continue, and goto alter normal flow by skipping or exiting loops. Together, control flow statements provide flexibility and logical structuring in C, making programs efficient and organized.</string>
    <string name="module3_notes_html">Links and Images:Links and images are essential for making a webpage interactive and visually appealing. Hyperlinks are created with the anchor tag along with the href attribute to point to another page or section. Links may connect to external sites internal pages email addresses or specific positions on the same page. Attributes like target blank open a link in a new tab while title shows extra text on hover. Images are inserted using the image tag with src to specify the file location and alt text to describe the image. Alt text is important for accessibility and helps when the image does not load. Image appearance can be adjusted with width height or style attributes. Together links and images connect content and provide better navigation and design for users.</string>
    <string name="module3_notes_css">Colors Fonts and Styling:CSS provides multiple ways to style web pages through colors typography and decorative properties. Colors can be defined by names hex codes or rgb values. Text styling includes properties like font family font size font weight line height and text alignment. Custom web fonts can be imported from Google Fonts to improve design. Backgrounds can be customized with color gradients or images. Borders can have varying thickness style and color. Shadows can be applied to text or boxes for depth effects. Transitions and hover effects bring interactivity by smoothly animating changes. Styling with CSS allows a web page to look attractive readable and consistent across devices. A strong grasp of these properties enables developers to design engaging user interfaces that enhance user experience.</string>
    <string name="module3_notes_js">Arrays Objects and Data Structures:Arrays and objects are essential in JavaScript for organizing and storing data. An array is an ordered collection that can hold multiple values of different types. Common array methods include map filter reduce and forEach which simplify operations on elements. Objects store data as key value pairs and allow grouping of related information. Understanding this keyword is important when working with object methods. The spread and rest operators make handling collections easier while destructuring helps extract values quickly. Sets and Maps provide efficient ways to manage unique values and key based data. JSON is widely used for data exchange between server and client. Knowing the difference between shallow and deep copy helps avoid bugs. Mastery of arrays objects and advanced structures improves problem solving and efficiency.</string>


    <string name="module4_notes">Functions:Functions in Python are reusable blocks of code that perform a specific task, improving modularity and reducing repetition. They are defined using the def keyword, followed by the function name, parameters, and a colon. The return statement sends results back to the caller, while parameters allow passing values into a function. Functions can also have default arguments, keyword arguments, or variable-length arguments (args,kwargs) for flexibility.Recursion occurs when a function calls itself to solve a smaller instance of a problem. Every recursive function must include a base case to stop infinite calls, and a recursive step to break the problem into simpler subproblems. Recursion is commonly used in tasks like factorial calculation, Fibonacci sequence, and tree traversals, though it requires careful design to avoid stack overflow errors.</string>
    <string name="module4_notes_java">Control Flow Statements: Control flow statements in Java determine the order in which instructions are executed within a program. They help in decision making, looping, and branching. The main decision-making statements are if, if else, nested if, and switch, which execute code blocks based on conditions. Looping statements include for, while, and do while, which allow repeated execution of code until a condition is met. The enhanced for loop is used for iterating through arrays and collections. Branching statements include break, continue, and return. Break exits a loop or switch immediately, continue skips the current iteration, and return exits from a method. These control flow mechanisms make programs dynamic, flexible, and logical, allowing developers to implement conditions, repetitions, and efficient execution of tasks in Java applications. </string>
    <string name="module4_notes_c">Function and Recursion:In C, functions are reusable blocks of code designed to perform a specific task. They improve modularity, readability, and reusability of programs. A function has a return type, a name, parameters (optional), and a body. C supports two types of functions: library functions (e.g., printf(), scanf()) and user-defined functions. Functions can return values using the return keyword or be declared as void if no value is returned.Recursion is a programming technique where a function calls itself directly or indirectly to solve a problem. It involves two parts: the base case (terminates recursion) and the recursive case (calls itself with reduced input). Examples include factorial calculation, Fibonacci series, and Tower of Hanoi. Recursion simplifies complex problems but requires careful termination to prevent infinite loops. </string>
    <string name="module4_notes_html">Tables and Forms:Tables are used in HTML to present data in rows and columns. The table element holds rows defined with tr headers with th and data cells with td. Attributes like colspan and rowspan allow cells to cover multiple rows or columns giving flexible layouts. Forms are important for collecting user input such as login or surveys. They are defined with the form element. Inputs can be text fields passwords checkboxes radio buttons drop down lists and text areas. Buttons allow submission of data to a server. The action attribute tells where data should be sent and the method defines whether it uses get or post. Adding labels improves accessibility by linking text to form fields. Tables and forms make webpages interactive and useful for real applications.</string>
    <string name="module4_notes_css">Tailwind CSS Basics:Tailwind CSS is a utility first CSS framework that provides predefined classes for styling directly in HTML. Instead of writing custom CSS developers use utility classes to build responsive layouts faster. For example classes like text center font bold or bg blue apply common styles quickly. Tailwind promotes a mobile first responsive design approach with breakpoints for small medium large and extra large screens. It provides extensive control for spacing margin padding typography and colors without writing new CSS rules. The framework is highly customizable and ensures consistency in design. Since classes are descriptive it reduces the need for switching between CSS and HTML files. Tailwind basics help beginners quickly build modern clean and responsive designs by focusing on structure and usability.</string>
    <string name="module4_notes_js">Asynchronous JavaScript and Events:JavaScript is single threaded but supports asynchronous operations for handling tasks like fetching data or waiting for timers. Callbacks were the earliest method of dealing with asynchronous code. Promises simplified this by providing then catch and finally chains to manage success or failure. Async and await keywords allow writing asynchronous code in a cleaner style. The event loop plays a key role in handling asynchronous tasks by moving them from the task queue into execution. Events allow user interaction such as clicks or form submissions. Event listeners detect actions while event bubbling and delegation explain how events move through the document. Understanding asynchronous code is critical for real world web development where tasks like API calls or file loading must not block the main thread.</string>


    <string name="module5_notes">OOPs in Python:Object-Oriented Programming (OOP) in Python is a paradigm that organizes code around objects and classes, promoting reusability and modularity. A class is a blueprint that defines attributes (variables) and methods (functions), while an object is an instance of a class. Python supports the four main OOP principles: Encapsulation (hiding data within objects using private attributes), Abstraction (hiding implementation details and exposing only essential features), Inheritance (creating new classes from existing ones to promote code reuse), and Polymorphism (using the same method name for different behaviors across classes). The __init__ method acts as a constructor to initialize objects. OOP in Python allows modeling of real-world entities, making programs more structured and easier to maintain. It is widely used in larger projects, frameworks, and application development..</string>
    <string name="module5_notes_java">Methods and Constructors: Methods and constructors are fundamental components of Java programming. A method is a block of code that performs a specific task, defined with a return type, name, and optional parameters. Methods help in code reusability, modularity, and readability. They can be called multiple times with different inputs, reducing redundancy. Constructors, on the other hand, are special methods used to initialize objects. They have the same name as the class and do not have a return type. Constructors can be default, created automatically by Java if none is provided, or parameterized, where arguments are passed to set initial values. Constructor overloading allows multiple constructors with different parameter lists. Together, methods and constructors make Java programs organized, flexible, and efficient by handling tasks and object creation smoothly.</string>
    <string name="module5_notes_c">Arrays, Strings, and Pointers:In C programming arrays store elements of the same data type in contiguous memory and each element is accessed by an index that starts at zero Arrays can be one dimensional like a list or two dimensional like a table Strings are character arrays that end with a null character and are used for storing text Common actions on strings include measuring length copying joining and comparing with standard library functions Pointers hold memory addresses of variables and enable array traversal dynamic memory allocation and passing large data to functions without extra copying Pointer arithmetic lets you move across an array by advancing or retreating one element at a time The array name often acts like a pointer to its first element though it is not itself a modifiable pointer</string>
    <string name="module5_notes_html">Multimedia and Semantic Elements:HTML supports the use of multimedia such as audio video and interactive features. The audio and video tags make it easy to add media directly without plugins. Options like controls autoplay and loop give users flexibility in how they interact with media. The source element helps add different formats for browser compatibility. External content such as videos or maps can be embedded using the iframe element. HTML5 also introduced semantic elements which give meaning to webpage content. Examples include header footer nav article section and aside. These make web pages more readable and improve accessibility. Search engines also benefit from semantic elements which improve ranking and visibility. Together multimedia and semantic HTML elements make modern websites more engaging user friendly and structured for both humans and machines.</string>
    <string name="module5_notes_css">Tailwind Layout and Components:Tailwind CSS simplifies layout creation with utilities for Flexbox and Grid systems. Classes like flex justify center items center and grid cols 3 make complex layouts easy to build. Developers can create responsive navigation bars footers and cards using predefined spacing and alignment utilities. Buttons can be styled with hover effects shadows and color utilities while forms can be designed with spacing borders and focus states. Tailwind also supports responsive design by applying classes with prefixes like md lg or xl for different screen sizes. Components built with Tailwind are reusable consistent and clean. This approach saves time compared to writing custom CSS and allows quick prototyping of real world user interfaces. With Tailwind developers can build polished designs with minimal effort.</string>
    <string name="module5_notes_js">DOM Manipulation and Browser APIs:The Document Object Model or DOM represents the structure of a web page as a tree. JavaScript allows developers to select elements using methods like getElementById and querySelector. Developers can modify content style and attributes to make web pages dynamic. Elements can also be created or removed at runtime. The classList property helps manage styles while inline styling allows direct changes. Form validation ensures user input is correct before submission. Browser APIs like LocalStorage SessionStorage and Cookies provide storage options. Fetch API and AJAX are used to retrieve or send data without reloading the page. Mastery of DOM manipulation is essential for building responsive and interactive web applications. It bridges the gap between static HTML and dynamic user experiences powered by JavaScript.</string>


    <string name="module6_notes">File handling in Python: File handling in Python allows programs to store and retrieve data permanently. The built-in open function is used to access files, requiring a filename and mode. Common modes include r for read, w for write which overwrites existing content, a for append, and b for binary. For reading, methods like read, readline, and readlines are used. For writing, write and writelines add data to files. It is important to close files after operations using close, but a safer approach is the with statement which automatically closes the file. Python also supports handling errors using try and except during file operations. File handling is essential for tasks like logging, data storage, and configuration management, making applications more practical and interactive by allowing persistent data management.</string>
    <string name="module6_notes_java">OOPs in Java: Oops in Java is a paradigm that organizes code into objects, combining data and behavior. Java fully supports OOP principles, making it modular, reusable, and easier to maintain. The four main pillars are encapsulation, inheritance, polymorphism, and abstraction. Encapsulation means binding data and methods inside a class while controlling access through access modifiers. Inheritance allows one class to acquire properties and methods of another, promoting reusability. Polymorphism enables methods to take many forms, such as method overloading at compile time and overriding at runtime. Abstraction hides unnecessary details and shows only essential features using abstract classes and interfaces. Java treats everything as objects, providing real-world modeling. OOP ensures scalability, flexibility, and maintainability, which is why Java is widely used in large-scale applications.</string>
    <string name="module6_notes_c">Structures and Unions:In C programming structures and unions are user defined data types that group different data items under one name A structure allows combining variables of different types for example an integer float and character can be grouped together Each member in a structure has its own memory location and can be accessed independently using the dot operator Structures are useful for representing records such as a student with roll number name and marks A union is similar in syntax but all members share the same memory location This means only one member can hold a value at a time which makes unions memory efficient but restrictive Unions are mainly used when variables share memory like representing data in multiple formats Both structures and unions enhance modularity and data organization.</string>
    <string name="module6_notes_html">HTML5:HTML5 provides advanced features that make web applications powerful and user friendly. The canvas element allows developers to draw graphics charts and animations using JavaScript. Scalable graphics can be made with the svg element. HTML5 also comes with several application programming interfaces such as geolocation for tracking location local storage and session storage for saving data and offline cache for running without internet. Multimedia support with audio and video eliminates the need for plugins. Form elements were improved with new input types like date email and range. Semantic elements and accessibility standards help screen readers and improve understanding of content. HTML5 also supports responsive design which makes pages work better on mobile devices. These features help developers create interactive efficient and modern web applications.</string>
    <string name="module6_notes_css">Tailwind Advanced Features:Tailwind CSS offers advanced features for customization and interactivity. Responsive variants allow applying different styles for multiple screen sizes using prefixes like sm md and lg. Dark mode support enables styling adjustments based on user preferences or device themes. Developers can extend the default configuration by modifying the tailwind config file to define custom colors fonts or spacing values. Plugins provide additional utilities and functionalities to enhance design. Tailwind also includes animation and transition utilities like animate bounce or transition ease in to create smooth interactive effects. These advanced features give developers full control over appearance while keeping code clean and scalable. Mastering Tailwind advanced concepts ensures that developers can build modern adaptive and feature rich web applications with consistent user experience.</string>
    <string name="module6_notes_js">Advanced JavaScript Concepts:Advanced JavaScript concepts include prototypes inheritance and object oriented patterns. The this keyword behaves differently depending on how a function is called and can be controlled using call apply or bind. ES6 introduced modern features like template literals optional chaining and modules which help organize code. Error handling with try catch and custom error objects ensures reliability. Regular expressions are powerful for pattern matching and data validation. JavaScript design patterns such as singleton factory module and observer provide reusable solutions to common problems. Understanding how prototypes work is essential for mastering inheritance. Knowledge of frameworks like React or backend platforms like Nodejs builds on these foundations. These concepts prepare developers for real world projects where efficiency maintainability and performance are critical.</string>


    <string name="submit">Submit</string>
    <string name="ongoing_courses">Ongoing Courses</string>
    <string name="liked_skills">Liked Skills</string>
    <string name="favourite_tutor">Favourite Tutor</string>
    <string name="history">History</string>
    <string name="feedback">Feedback</string>
    <string name="terms_and_conditions">Terms and Conditions</string>
    <string name="contact_us">Contact Us</string>
    <string name="share_app">Share App</string>
    <string name="about_us">About Us</string>
    <string name="start_final_assessment">Start Final Assessment</string>
    <string name="submit_assessment">Submit Assessment</string>
    <string name="user_name">User Name</string>


</resources>
